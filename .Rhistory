library(rpart)
library(rpart.plot)
library(tidyverse)
library(ggplot2)
setwd("/Users/mickey/Documents/GitHub/practical-machine-learning")
if (!file.exists("train.csv")){
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileURL, "train.csv", method="curl")
}
if (!file.exists("test.csv")) {
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileURL, "test.csv", method="curl")
}
trainingset <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
testingset <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
trainingset<- train[,colSums(is.na(train)) == 0] %>% select(-c(1:7))
testingset <- test[,colSums(is.na(test)) == 0] %>% select(-c(1:7))
set.seed(24)
trainingset <- createDataPartition(y=train$classe,p=0.75,list=F)
subTraining <- train[sub,]
subTesting <- train[-sub,]
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(ggplot2)
setwd("/Users/mickey/Documents/GitHub/practical-machine-learning")
if (!file.exists("train.csv")){
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileURL, "train.csv", method="curl")
}
if (!file.exists("test.csv")) {
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileURL, "test.csv", method="curl")
}
trainingset <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
testingset <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
trainingset<- train[,colSums(is.na(train)) == 0] %>% select(-c(1:7))
testingset <- test[,colSums(is.na(test)) == 0] %>% select(-c(1:7))
set.seed(24)
trainingset <- createDataPartition(y=train$classe,p=0.75,list=F)
subTraining <- train[sub,]
subTesting <- train[-sub,]
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(ggplot2)
setwd("/Users/mickey/Documents/GitHub/practical-machine-learning")
if (!file.exists("train.csv")){
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileURL, "train.csv", method="curl")
}
if (!file.exists("test.csv")) {
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileURL, "test.csv", method="curl")
}
trainingset <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
testingset <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
trainingset<- train[,colSums(is.na(trainingset)) == 0] %>% select(-c(1:7))
testingset <- test[,colSums(is.na(testingset)) == 0] %>% select(-c(1:7))
set.seed(24)
trainingset <- createDataPartition(y=train$classe,p=0.75,list=F)
subTraining <- train[trainingset,]
subTesting <- train[-trainingset,]
trainingset <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
testingset <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
trainingset<- train[,colSums(is.na(trainingset)) == 0] %>% select(-c(1:7))
testingset <- test[,colSums(is.na(testingset)) == 0] %>% select(-c(1:7))
trainingset <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
testingset <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
dim(trainingset)
dim(testingset)
str(trainingset)
trainingset<- train[,colSums(is.na(trainingset)) == 0] %>% select(-c(1:7))
train[,colSums(is.na(trainingset))
train[,colSums(is.na(trainingset)) == 0]
train[,colSums(is.na(trainingset)) == 0]
train[,colSums(is.na(testingset)) == 0]
if (!file.exists("train.csv")){
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileURL, "train.csv", method="curl")
}
if (!file.exists("test.csv")) {
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileURL, "test.csv", method="curl")
}
trainingset <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
testingset <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
dim(trainingset)
dim(testingset)
trainingset<- train[,colSums(is.na(trainingset)) == 0] %>% select(-c(1:7))
testingset <-
trainingset<-trainingset[,colSums(is.na(trainingset)) == 0]
testingset <-testingset[,colSums(is.na(testingset)) == 0]
trainingset   <-trainingset[,-c(1:7)]
testingset <-testingset[,-c(1:7)]
dim(trainingset)
dim(testingset)
subsamples <- createDataPartition(y=trainingset$classe, p=0.75, list=FALSE)
subTraining <- trainingset[subsamples, ]
subTesting <- trainingset[-subsamples, ]
dim(subTraining)
dim(subTesting)
head(subTraining)
head(subTesting)
subsamples <- createDataPartition(y=trainingset$classe, p=0.75, list=FALSE)
subTraining <- trainingset[subsamples, ]
subTesting <- trainingset[-subsamples, ]
dim(subTraining)
dim(subTesting)
plot(subTraining$classe, col="blue", main="Bar Plot of levels of the variable classe within the subTraining data set", xlab="classe levels", ylab="Frequency")
model1 <- rpart(classe ~ ., data=subTraining, method="class")
# Predicting:
prediction1 <- predict(model1, subTesting, type = "class")
# Plot of the Decision Tree
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
confusionMatrix(prediction1, subTesting$classe)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(ggplot2)
setwd("/Users/mickey/Documents/GitHub/practical-machine-learning")
if (!file.exists("train.csv")){
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileURL, "train.csv", method="curl")
}
if (!file.exists("test.csv")) {
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileURL, "test.csv", method="curl")
}
train <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
test <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
train<-train[,colSums(is.na(train)) == 0]
test <-test[,colSums(is.na(test)) == 0]
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
set.seed(24)
subs <- createDataPartition(y=train$classe, p=0.75, list=FALSE)
subtrain <- train[subs, ]
subtest <- train[-subs, ]
mod1 <- rpart(classe ~ ., data=subtrain, method="class")
pred1 <- predict(mod1, subTesting, type = "class")
rpart.plot(mod1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
confusionMatrix(pred1, subtest$classe)
mod2 <- randomForest(classe ~. , data=subtrain, method="class")
prediction2 <- predict(mod2, subtest, type = "class")
confusionMatrix(pred2, subtest$classe)
mod2 <- randomForest(classe ~. , data=subtrain, method="class")
pred2 <- predict(mod2, subtest, type = "class")
confusionMatrix(pred2, subtest$classe)
#Random Forest
mod2 <- train(classe ~ ., data=training, method="rf")
#Random Forest
mod2 <- train(classe ~ ., data=subtrain, method="rf")
source('~/Documents/GitHub/practical-machine-learning/peer_assignment.R')
mod2 <- train(classe ~ ., data=subtrain, method="rf")
source('~/Documents/GitHub/practical-machine-learning/peer_assignment.R')
mod2 <- train(classe ~ ., data=subtrain, method="rf")
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(ggplot2)
setwd("/Users/mickey/Documents/GitHub/practical-machine-learning")
if (!file.exists("train.csv")){
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileURL, "train.csv", method="curl")
}
if (!file.exists("test.csv")) {
fileURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileURL, "test.csv", method="curl")
}
train <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
test <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
train<-train[,colSums(is.na(train)) == 0]
test <-test[,colSums(is.na(test)) == 0]
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
set.seed(24)
subs <- createDataPartition(y=train$classe, p=0.75, list=FALSE)
subtrain <- train[subs, ]
subtest <- train[-subs, ]
#Decision Tree
mod1 <- rpart(classe ~ ., data=subtrain, method="class")
pred1 <- predict(mod1, subTesting, type = "class")
rpart.plot(mod1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
confusionMatrix(pred1, subtest$classe)
#Random Forest
debugSource('~/Documents/GitHub/practical-machine-learning/peer_assignment.R')
mod1 <- rpart(classe ~ ., data=subtrain, method="class")
pred1 <- predict(mod1, subtest, type = "class")
confusionMatrix(pred1, subtest$classe)
mod2 <- train(classe ~ ., data=subtrain, method="rf")
train <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
test <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
train<-train[,colSums(is.na(train)) == 0]
test <-test[,colSums(is.na(test)) == 0]
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
corrupted_rows <- sapply(train, function(x) {sum(!(is.na(x) | x == ""))})
corrupted_rows
had(corrupted_rows)
head(corrupted_rows)
train <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
test <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
nzv_col <- nearZeroVar(Training)
train <- Training[, -nzvcol]
nzv_col <- nearZeroVar(train)
train <- train[, -nzvcol]
train <- train[, -nzv_col]
corrupted_col <- sapply(train, function(x) {sum(!(is.na(x) | x == ""))})
null_col <- names(corrupted_col[corrupted_col < 0.6 * length(train$classe)])
null_col
train <- train[, !names(train) %>% null_coll]
train <- train[, !names(train) %>% null_col]
null_col <- names(corrupted_col[corrupted_col < 0.6 * length(train$classe)])
train <- train[, !names(train) %>% null_col]
train <- train[, !names(train) %in% null_col]
dim(train)
train <- train[, !names(train) %in% null_col]
train <- read.csv("train.csv",na.strings=c("NA","DIV/0!",""))
test <- read.csv("test.csv",na.strings=c("NA","DIV/0!",""))
train   <-train[,-c(1:7)]
test <-test[,-c(1:7)]
nzv_col <- nearZeroVar(train)
train <- train[, -nzv_col]
corrupted_col <- sapply(train, function(x) {sum(!(is.na(x) | x == ""))})
null_col <- names(corrupted_col[corrupted_col < 0.6 * length(train$classe)])
train <- train[, !names(train) %in% null_col]
set.seed(24)
subs <- createDataPartition(y=train$classe, p=0.75, list=FALSE)
subtrain <- train[subs, ]
subtest <- train[-subs, ]
mod1 <- rpart(classe ~ ., data=subtrain, method="class")
pred1 <- predict(mod1, subtest, type = "class")
confusionMatrix(pred1, subtest$classe)
mod2 <- train(classe ~ ., data=subtrain, method="rf")
str(train)
system.time(trainingModel <- train(classe ~ ., data=subtrain, method=method))
system.time(trainingModel <- train(classe ~ ., data=subtrain, method="rf"))
stopCluster(cl)
mod2 <- train(classe ~ ., data=subtrain, method="rf")
str(train)
install.packages("shiny")
library(shiny)
runApp('~/Documents/R/testing/myApp')
setwd("~/Documents/R/testing/myApp")
runApp()
?builder
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map
library(leaflet)
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leek's Office")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
require(XML)
file <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.xml?accessType=DOWNLOAD"
data <- xmlParse(file)
install.packages("XML")
require(XML)
file <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.xml?accessType=DOWNLOAD"
data <- xmlParse(file)
xml_data <- xmlToList(data)
install.library("rjson")
install.packages("rjson")
setwd("/Users/mickey/Documents/GitHub/data-products")
if (!file.exists("courts.csv")){
fileURL <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.json?accessType=DOWNLOAD"
download.file(fileURL, "courts.csv", method="curl")
}
require(rjson)
setwd("/Users/mickey/Documents/GitHub/data-products")
if (!file.exists("courts.json")){
fileURL <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.json?accessType=DOWNLOAD"
download.file(fileURL, "courts.json", method="curl")
}
data <- xmlParse("courds.json")
require(rjson)
setwd("/Users/mickey/Documents/GitHub/data-products")
if (!file.exists("courts.json")){
fileURL <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.json?accessType=DOWNLOAD"
download.file(fileURL, "courts.json", method="curl")
}
courts_json <- "courts.json"
courts <- fromJSON(paste(readLines(courts_json), collapse=""))
head(courts)
courts_json <- "courts.json"
courts <- fromJSON(file=courts_json)
head(courts)
require(rjson)
setwd("/Users/mickey/Documents/GitHub/data-products")
if (!file.exists("courts.csv")){
fileURL <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, "courts.csv", method="curl")
}
courts <- read.csv("courts.csv")
require(rjson)
setwd("/Users/mickey/Documents/GitHub/data-products")
if (!file.exists("courts.csv")){
fileURL <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, "courts.csv", method="curl")
}
courts <- read.csv("courts.csv")
head(courts)
courts <- read.csv("courts.csv") %>% select(ID, DIVISION,LATITUDE, LONGITUDE)
head(courts)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
head(courts)
unique(DIVISION)
unique(courts$DIVISION)
courts <- read.csv("courts.csv") %>% select(ID, DIVISION,LATITUDE, LONGITUDE)
head(courts)
courts <- read.csv("courts.csv")
head(courts)
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
head(court)
head(courts)
unique(courts$ID)
unique(courts$TYPE)
palette()
courts$type <- ifelse(courts$TYPE,"4 Way Hoop","black",
iflese(courts$TYPE,"Double Court","cyan",
ifelse(courts$TYPE,"Half Court","yellow",
ifelse(courts$TYPE,"Single Court","magenta","grey"))))
courts$type <- ifelse(courts$TYPE,"4 Way Hoop","black",
iflese(courts$TYPE,"Double Court","cyan",
ifelse(courts$TYPE,"Half Court","yellow",
ifelse(courts$TYPE,"Single Court","magenta","grey"))))
courts$type <- ifelse(courts$TYPE == "4 Way Hoop","black",
iflese(courts$TYPE == "Double Court","cyan",
ifelse(courts$TYPE == "Half Court","yellow",
ifelse(courts$TYPE == "Single Court","magenta","grey"))))
courts$type <- ifelse(courts$TYPE == "4 Way Hoop","black",
ifelse(courts$TYPE == "Double Court","cyan",
ifelse(courts$TYPE == "Half Court","yellow",
ifelse(courts$TYPE == "Single Court","magenta","grey"))))
head(courts)
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions()) %>%
addLegend(labels = TYPE, colors = type)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers() %>%
addLegend(labels = TYPE, colors = type)
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
courts$type <- ifelse(courts$TYPE == "4 Way Hoop","black",
ifelse(courts$TYPE == "Double Court","cyan",
ifelse(courts$TYPE == "Half Court","yellow",
ifelse(courts$TYPE == "Single Court","magenta","grey"))))
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions()) %>%
addLegend(labels = TYPE, colors = type)
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
courts$colors <- ifelse(courts$TYPE == "4 Way Hoop","black",
ifelse(courts$TYPE == "Double Court","cyan",
ifelse(courts$TYPE == "Half Court","yellow",
ifelse(courts$TYPE == "Single Court","magenta","grey"))))
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions()) %>%
addLegend(labels = TYPE, colors = colors)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions()) %>%
addLegend(labels = courts$TYPE, colors = courts$colors)
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
col_df <- courts %>% select(TYPE) %>% unique() %>% data.frame()
col_df$colors <- ifelse(courts$TYPE == "4 Way Hoop","black",
ifelse(courts$TYPE == "Double Court","cyan",
ifelse(courts$TYPE == "Half Court","yellow",
ifelse(courts$TYPE == "Single Court","magenta","grey"))))
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions()) %>%
addLegend(labels = col_df$TYPE, colors = col_df$colors)
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
col_df <- courts %>% select(TYPE) %>% unique() %>% data.frame()
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions()) %>%
addLegend(labels = col_df$TYPE, colors = c("blue","black","grey","magenta"))
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(),color = courts$colors)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(),colors = courts$colors) %>%
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(),colors = courts$colors)
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
logo <- makeIcon(
iconUrl = "basketball-court-clipart-black-and-white-15.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), icon = logo)
require(rjson)
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/data-products")
if (!file.exists("courts.csv")){
fileURL <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, "courts.csv", method="curl")
}
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
logo <- makeIcon(
iconUrl = "basketball-court-clipart-black-and-white-15.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), icon = logo)
require(rjson)
library(tidyverse)
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/data-products")
if (!file.exists("courts.csv")){
fileURL <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, "courts.csv", method="curl")
}
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
logo <- makeIcon(
iconUrl = "basketball-court-clipart-black-and-white-15.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), icon = logo)
install.packages("leaflet")
require(leaflet)
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/data-products")
if (!file.exists("courts.csv")){
fileURL <- "https://www.data.act.gov.au/api/views/igti-4f4a/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, "courts.csv", method="curl")
}
courts <- read.csv("courts.csv") %>% select(ID, TYPE, DIVISION,LATITUDE, LONGITUDE)
logo <- makeIcon(
iconUrl = "basketball-court-clipart-black-and-white-15.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
courts %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), icon = logo)
