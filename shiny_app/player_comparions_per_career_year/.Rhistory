ifelse(basnLG$month == "month7_per_maus",7,
ifelse(basnLG$month == "month8_per_maus",8,
ifelse(basnLG$month == "month9_per_maus",9,
ifelse(basnLG$month == "month10_per_maus",10,
ifelse(basnLG$month == "month11_per_maus",11,
ifelse(basnLG$month == "month12_per_maus",12,""
))))))))))))
basnLG$status <- ifelse(basnLG$dpe180_rchurn == 1,"rchurned",
ifelse(basnLG$dpe180_rchurn == 0,"active",""))
basnLG$months <- as.numeric(basnLG$months)
basnLG$month  <- NULL
meannLg <- aggregate(per_maus~status+months+existing_type,basnLG,mean)
meanPlot  <- ggplot(data=meanLg,  aes(x=months,y=per_maus,group=status,color=status)) + geom_line(size=1.5) + geom_point() + ggtitle("all")      + ylim(0,50) + xlim(1,12) + facet_wrap(~existing_type,nrow=1)
meannPlot <- ggplot(data=meannLg, aes(x=months,y=per_maus,group=status,color=status)) + geom_line(size=1.5) + geom_point() + ggtitle("new")		 + ylim(0,50) + xlim(1,12) + facet_wrap(~existing_type,nrow=1)
meanrPlot <- ggplot(data=meanrLg, aes(x=months,y=per_maus,group=status,color=status)) + geom_line(size=1.5) + geom_point() + ggtitle("existing") + ylim(0,50) + xlim(1,12) + facet_wrap(~existing_type,nrow=1)
grid.arrange(meanPlot,meannPlot,meanrPlot,ncol=3,nrow=1)
basnLG
meanPlot  <- ggplot(data=meanLg,  aes(x=months,y=per_maus,group=status,color=status)) + geom_line(size=1.5) + geom_point() + ggtitle("all")      + ylim(0,50) + xlim(1,12) + facet_wrap(~status,nrow=1)
meanPlot
meanPlot  <- ggplot(data=meanLg,  aes(x=months,y=per_maus,group=status,color=status)) + geom_line(size=1.5) + geom_point() + ggtitle("all")      + ylim(0,50) + xlim(1,12) + facet_wrap(~existing_type,nrow=1)
meanPlot
View(basnLG)
meanPlot  <- ggplot(data=meanLg,  aes(x=months,y=per_maus,group=status,color=status)) + geom_line(size=1.5) + geom_point() + ggtitle("all")      + ylim(0,50) + xlim(1,12) + facet_wrap(~existing_type,nrow=2)
meanPlot
library(tidyverse)
library(plotly)
library(lubridate)
library(rmarkdown)
library(knitr)
library(tidyverse)
library(vegan)
source('/Users/mebner/src/product_analytics/R_Common/query_atl_db.R')
source('/Users/mebner/src/product_analytics/R_Common/basic_functions.R')
source('/Users/mebner/src/product_analytics/R_Common/query_atl_db.R')
source('/Users/mebner/src/product_analytics/R_Common/basic_functions.R')
library(tidyverse)
library(plotly)
library(lubridate)
library(rmarkdown)
library(knitr)
library(tidyverse)
library(vegan)
source('/Users/mebner/src/product_analytics/R_Common/query_atl_db.R')
source('/Users/mebner/src/product_analytics/R_Common/basic_functions.R')
CacheOrQueryAthenaFilename("jira_active_admins_monthly.sql")
CacheOrQueryAthenaFilename("~/src/product_analytics/Server/COPSD/COPSD-399/jsd_dc_customers_by_join_date.csv")
CacheOrQueryAthenaFilename("~/src/product_analytics/Server/COPSD/COPSD-399/jsd_dc_customers_by_join_date.csv")
servus <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
getting packages
#getting packages
library(dplyr)
library(ggplot2)
#Set Working Directore
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/reproducable_research_peerassessment2/storm.Rmd")
#getting packages
library(dplyr)
library(ggplot2)
#Set Working Directore
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/reproducable_research_peerassessment2")
#get raw data
storm_raw <- read.csv("repdata%2Fdata%2FStormData.csv")
head(storm_raw)
str(storm_raw)
levels(storm_raw$STATE)
levels(storm_raw$STATE__)
levels(storm_raw$STATE_)
levels(storm_raw$STATE__)
lenght(levels(storm_raw$STATE))
length(levels(storm_raw$STATE))
length(levels(storm_raw$STATEOFFIC))
levels(storm_raw$STATEOFFIC)
str(storm_raw
)
levels(storm_raw$EVTYPE)
summary(storm_raw)
str(storm_raw)
storm_tidy <- storm_raw[,c("EVTYPE","FATALITIES","INJURIES","PROPDMG")]
head(storm_tidy)
storm_tidy <- storm_tidy %>% group_by(evtype) %>% summarise_all(funs(sum))
storm_tidy <- storm_tidy %>% group_by(EVTYPE) %>% summarise_all(funs(sum))
head(storm_tidy)
View(storm_tidy)
storm_tidy$clean_event <- df$loc01 <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard','no_blizzard')
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard','no_blizzard')
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE,'avalanche',
))
)
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE,'avalanche','missing'
)))
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE,storm_tidy$EVTYPE)",'avalanche','missing'
)))
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE),'avalanche','missing'
)))
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE),'avalanche','missing'
))
storm_tidy <- storm_tidy %>% filter(FATALITIES > 0 | INJURIES > 0 | PROPDMG >0)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE),'avalanche',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'brush fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("cold",storm_tidy$EVTYPE,ignore.case = T),'cold',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat',
'others')))))))))))))))))))))))
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE),'avalanche',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'brush fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("cold",storm_tidy$EVTYPE,ignore.case = T),'cold',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat',
'others')))))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'brush fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat',
'others')))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat',
'others')))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'hot and dry',
'others')))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("hypothermia|icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'hot and dry',
'others'))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'land flood',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("hypothermia|icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat and dry',
'others'))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'land flood',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("landslide|mud.*slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("hypothermia|icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat and dry',
'others'))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'land flood',
ifelse(grepl("high water|seas|surf|current|wave|high tide",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("landslide|mud.*slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'land slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("avalanc.*e",storm_tidy$EVTYPE,ignore.case = T),'avalanches',
ifelse(grepl("hypothermia|icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat and dry',
'others')))))))))))))))))))))
View(storm_tidy)
1525 / (1525+1269)
3026 / 41.65
73 * 100
2484 / 7300
4/24
6/24
df_players = data.frame()
for (i in  letters){
# vector output
players <- try(get_players(i))
df_players <- rbind(df_players,players)
}
players <- df_players %>% mutate(from = as.numeric(from), to = as.numeric(to)) %>% mutate(years_active = to - from) %>% filter(!is.na(from) & from >= 1980 & years_active >= 5)
players$name <- paste0(sub("[a-zA-Z\\.\\'\\-]+ ", "", players$player)," ",sub(" [a-zA-Z\\.\\'\\-]+", "", players$player))
slugs <- unlist(as.list(players$slug))
player_stats = data.frame()
for (i in  slugs){
# vector output
initials <- paste0(substr(i,1,1),"/")
selection <- htmltab(doc = paste0("https://www.basketball-reference.com/players/",initials,i,".html"), which = 1, header = 1,rm_nodata_cols = F)
selection$slug <- paste0(i)
player_stats <- rbind(player_stats,selection)
}
#rm(list = ls())
library(ggplot2)
library(dplyr)
library(bbr)
library(htmltab)
library(stringr)
library(shiny)
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/data-products/shiny_app/player_comparions_per_career_year/")
df_players = data.frame()
for (i in  letters){
# vector output
players <- try(get_players(i))
df_players <- rbind(df_players,players)
}
players <- df_players %>% mutate(from = as.numeric(from), to = as.numeric(to)) %>% mutate(years_active = to - from) %>% filter(!is.na(from) & from >= 1980 & years_active >= 5)
players$name <- paste0(sub("[a-zA-Z\\.\\'\\-]+ ", "", players$player)," ",sub(" [a-zA-Z\\.\\'\\-]+", "", players$player))
slugs <- unlist(as.list(players$slug))
player_stats = data.frame()
for (i in  slugs){
# vector output
initials <- paste0(substr(i,1,1),"/")
selection <- htmltab(doc = paste0("https://www.basketball-reference.com/players/",initials,i,".html"), which = 1, header = 1,rm_nodata_cols = F)
selection$slug <- paste0(i)
player_stats <- rbind(player_stats,selection)
}
source('app.R')
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/data-products/shiny_app/player_comparions_per_career_year/")
df_players = data.frame()
for (i in  letters){
# vector output
players <- try(get_players(i))
df_players <- rbind(df_players,players)
}
df_players = data.frame()
for (i in  letters){
# vector output
players <- try(get_players(i))
df_players <- rbind(df_players,players)
}
players <- df_players %>% mutate(from = as.numeric(from), to = as.numeric(to)) %>% mutate(years_active = to - from) %>% filter(!is.na(from) & from >= 1980 & years_active >= 5)
players$name <- paste0(sub("[a-zA-Z\\.\\'\\-]+ ", "", players$player)," ",sub(" [a-zA-Z\\.\\'\\-]+", "", players$player))
slugs <- unlist(as.list(players$slug))
player_stats = data.frame()
for (i in  slugs){
# vector output
initials <- paste0(substr(i,1,1),"/")
selection <- htmltab(doc = paste0("https://www.basketball-reference.com/players/",initials,i,".html"), which = 1, header = 1,rm_nodata_cols = F)
selection$slug <- paste0(i)
player_stats <- rbind(player_stats,selection)
}
head(player_stats)
head(slugs)
View(slugs)
slugs
df_players
source('app.R')
#rm(list = ls())
library(ggplot2)
library(dplyr)
library(bbr)
library(htmltab)
library(stringr)
library(shiny)
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/data-products/shiny_app/player_comparions_per_career_year/")
df_players = data.frame()
for (i in  letters){
# vector output
players <- try(get_players(i))
df_players <- rbind(df_players,players)
}
players <- df_players %>% mutate(from = as.numeric(from), to = as.numeric(to)) %>% mutate(years_active = to - from) %>% filter(!is.na(from) & from >= 1980 & years_active >= 5)
players$name <- paste0(sub("[a-zA-Z\\.\\'\\-]+ ", "", players$player)," ",sub(" [a-zA-Z\\.\\'\\-]+", "", players$player))
slugs <- unlist(as.list(players$slug))
head(slugs)
head(df_players)
write.csv(df_players,'df_players.csv')
test <- read.csv('df_players.csv')
head(test)
slugs
test <- unlist(as.list(df_players$slug))
test
head(df_players)
#rm(list = ls())
library(ggplot2)
library(dplyr)
library(bbr)
library(htmltab)
library(stringr)
library(shiny)
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/data-products/shiny_app/player_comparions_per_career_year/")
#df_players = data.frame()
#for (i in  letters){
# vector output
#  players <- try(get_players(i))
#  df_players <- rbind(df_players,players)
#}
#players <- df_players %>% mutate(from = as.numeric(from), to = as.numeric(to)) %>% mutate(years_active = to - from) %>% filter(!is.na(from) & from >= 1980 & years_active >= 5)
#players$name <- paste0(sub("[a-zA-Z\\.\\'\\-]+ ", "", players$player)," ",sub(" [a-zA-Z\\.\\'\\-]+", "", players$player))
df_players <- read.csv('df_players.csv')
slugs <- unlist(as.list(df_players$slug))
source('app.R')
source('app.R')
source('app.R')
selection <- players %>% subset(name == input$player1) %>% select(slug)
source('app.R')
head(players)
source('app.R')
source('app.R')
source('app.R')
selection
selection <- players %>% subset(player == input$player1) %>% select(slug)
head(players)
selection <- 'abdelal01'
initial <- paste0(substr(as.character(selection), 1, 1),"/")
initial
df <- htmltab(doc = paste0("https://www.basketball-reference.com/players/",initial,as.character(selection),".html"), which = 1, header = 1,rm_nodata_cols = F)
df
df <- df %>% mutate()
df
source('app.R')
library(shiny); source('app.R')
source('app.R')
source('app.R')
players <- read.csv('df_players.csv')
slugs <- unlist(as.list(players$slug))
head(slugs)
selection <- players %>% subset(player == input$player1) %>% select(slug)
initial <- paste0(substr(as.character(selection), 1, 1),"/")
df <- htmltab(doc = paste0("https://www.basketball-reference.com/players/",initial,as.character(selection),".html"), which = 1, header = 1,rm_nodata_cols = F)
df <- df %>% mutate()
df
return(df)
selection
players
selection <- "anderry01"
source('app.R')
df <- htmltab(doc = paste0("https://www.basketball-reference.com/players/",initial,as.character(selection),".html"), which = 1, header = 1,rm_nodata_cols = F)
df <- df %>% mutate()
head(df)
selection <- players %>% subset(player == input$player1) %>% select(slug)
selection
inpug
input
head(players)
head(slug)
select <- "abdulta01"
initial <- paste0(substr(as.character(selection), 1, 1),"/")
df <- htmltab(doc = paste0("https://www.basketball-reference.com/players/",initial,as.character(selection),".html"), which = 1, header = 1,rm_nodata_cols = F)
df <- df %>% mutate()
df
source('app.R')
df_players = data.frame()
for (i in  letters){
#vector output
players <- try(get_players(i))
df_players <- rbind(df_players,players)
}
head(df_players)
tail(df_players)
players <- df_players %>% mutate(from = as.numeric(from), to = as.numeric(to)) %>% mutate(years_active = to - from) %>% filter(!is.na(from) & from >= 1980 & years_active >= 5)
players$name <- paste0(sub("[a-zA-Z\\.\\'\\-]+ ", "", players$player)," ",sub(" [a-zA-Z\\.\\'\\-]+", "", players$player))
write.csv(df_players,'df_players.csv')
players <- read.csv('df_players.csv')
slugs <- unlist(as.list(players$slug))
head(slugs)
head(players)
tail(players)
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
