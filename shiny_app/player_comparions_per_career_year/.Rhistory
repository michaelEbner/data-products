lenght(levels(storm_raw$STATE))
length(levels(storm_raw$STATE))
length(levels(storm_raw$STATEOFFIC))
levels(storm_raw$STATEOFFIC)
str(storm_raw
)
levels(storm_raw$EVTYPE)
summary(storm_raw)
str(storm_raw)
storm_tidy <- storm_raw[,c("EVTYPE","FATALITIES","INJURIES","PROPDMG")]
head(storm_tidy)
storm_tidy <- storm_tidy %>% group_by(evtype) %>% summarise_all(funs(sum))
storm_tidy <- storm_tidy %>% group_by(EVTYPE) %>% summarise_all(funs(sum))
head(storm_tidy)
View(storm_tidy)
storm_tidy$clean_event <- df$loc01 <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard','no_blizzard')
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard','no_blizzard')
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE,'avalanche',
))
)
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE,'avalanche','missing'
)))
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE,storm_tidy$EVTYPE)",'avalanche','missing'
)))
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE),'avalanche','missing'
)))
storm_tidy$clean_event <- ifelse(grepl("^BLIZZARD",storm_tidy$EVTYPE),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE),'avalanche','missing'
))
storm_tidy <- storm_tidy %>% filter(FATALITIES > 0 | INJURIES > 0 | PROPDMG >0)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE),'avalanche',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'brush fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("cold",storm_tidy$EVTYPE,ignore.case = T),'cold',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat',
'others')))))))))))))))))))))))
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("(AVALANCE|AVALANCHE)",storm_tidy$EVTYPE),'avalanche',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'brush fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("cold",storm_tidy$EVTYPE,ignore.case = T),'cold',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat',
'others')))))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'brush fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat',
'others')))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat',
'others')))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("hypothermia",storm_tidy$EVTYPE,ignore.case = T),'hypothermia',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'hot and dry',
'others')))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'off coast food',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("hypothermia|icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'hot and dry',
'others'))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'land flood',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("landslide|mud.slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("hypothermia|icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat and dry',
'others'))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'land flood',
ifelse(grepl("high water|seas|surf|current|wave",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("landslide|mud.*slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("avalanc.e|wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("hypothermia|icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat and dry',
'others'))))))))))))))))))))
View(storm_tidy)
storm_tidy$clean_event <- ifelse(grepl("bizzard",storm_tidy$EVTYPE,ignore.case = T),'blizzard',
ifelse(grepl("^blowing snow",storm_tidy$EVTYPE,ignore.case = T),'blowing snow',
ifelse(grepl("fire",storm_tidy$EVTYPE,ignore.case = T),'fire',
ifelse(grepl("tsunami",storm_tidy$EVTYPE,ignore.case = T),'tsunami',
ifelse(grepl("coastal flood|coastal erosion|tidal flooding",storm_tidy$EVTYPE,ignore.case = T),'costal flood',
ifelse(grepl("flood|rapidly rising water|urban.*small",storm_tidy$EVTYPE,ignore.case = T),'land flood',
ifelse(grepl("high water|seas|surf|current|wave|high tide",storm_tidy$EVTYPE,ignore.case = T),'heavy seas',
ifelse(grepl("^fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("^dry",storm_tidy$EVTYPE,ignore.case = T),'dry',
ifelse(grepl("fog",storm_tidy$EVTYPE,ignore.case = T),'fog',
ifelse(grepl("dust devil|dust.*storm",storm_tidy$EVTYPE,ignore.case = T),'dust storm',
ifelse(grepl("hurricane",storm_tidy$EVTYPE,ignore.case = T),'hurricane',
ifelse(grepl("tornado",storm_tidy$EVTYPE,ignore.case = T),'tornado',
ifelse(grepl("landslide|mud.*slide|rock slide",storm_tidy$EVTYPE,ignore.case = T),'land slides',
ifelse(grepl("lightning|ligntning",storm_tidy$EVTYPE,ignore.case = T),'lightning',
ifelse(grepl("hail",storm_tidy$EVTYPE,ignore.case = T),'hail',
ifelse(grepl("rain|shower|thunderstorm|tropical depression|storm",storm_tidy$EVTYPE,ignore.case = T),'rain/thunderstorm',
ifelse(grepl("wind|gustnado|turbulence",storm_tidy$EVTYPE,ignore.case = T),'wind',
ifelse(grepl("avalanc.*e",storm_tidy$EVTYPE,ignore.case = T),'avalanches',
ifelse(grepl("hypothermia|icy|cold|freez|frost|glaze|snow|ice|snow|low temperature",storm_tidy$EVTYPE,ignore.case = T),'various ice and snow',
ifelse(grepl("dry|heat|warm",storm_tidy$EVTYPE,ignore.case = T),'heat and dry',
'others')))))))))))))))))))))
View(storm_tidy)
library(ggplot2)
library(dplyr)
library(htmltab)
library(bbr)
names <- get_players("A")
out=NULL
for (i in 1:2){
a <- c(2, (i+10))
b <- c((i+10), 5)
c <- data.frame(a,b)
out=rbind(out,c)
}
out
df_players = data.frame()
for (i in  LETTERS){
# vector output
players <- try(get_players(i))
df_players <- rbind(df_players,players)
}
head(df_players)
wd
swd
gwd()
getwd()
setw("/Users/mebner/Documents/for_me/R_coursera/GitHub/shiny_app/player_comparions_per_career_year/app.R")
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/shiny_app/player_comparions_per_career_year/app.R")
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/shiny_app/player_comparions_per_career_year/")
write.csv(df_players,"players.csv")
write.csv(df_players,"players.csv",quote = F,row.names = F)
players <- read.csv("players.csv")
write.csv(df_players,"players.csv")
players <- read.csv("players.csv")
head(players)
write.csv(df_players,"players.csv", row.names = T)
players <- read.csv("players.csv")
head(players)
write.csv(df_players,"players.csv", row.names = F)
head(players)
players <- read.csv("players.csv")
head(players)
players[,1]
head(players)
library(ggplot2)
library(dplyr)
library(bbr)
library(htmltab)
library(stringr)
players %>% filter(str_match(player,"^A"))
players %>% filter(str_match("^A",player))
?str_match
str_match("^A",player)
str_match("^A",players$player)
str(players)
str_match("^A",as.character(players$player))
str_match("^A","Aber")
str_match("^A",'Aber')
str_match("^A","Aber Du")
str_match("Aber","^A")
str_match(as.character(players$player),"^A")
str_match("Aber","^A")
str_match("Aber","^A.*")
str_match(as.character(players$player),"^A.*")
players %>% filter(!is.na(str_match(as.character(players$player),"^A.*")))
str_extract("Kobe Bryant"," +")
str_extract("Kobe Bryant"," .+")
str_extract("Kobe Bryant",".+")
!str_extract()
?str_extract()
str_extract_all("This is, suprisingly, a sentence.", boundary("word"))
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract_all(shopping_list, "\\b[a-z]+\\b", simplify = TRUE)
str_extract_all("Kobe Bryant", "\\b[a-z]+\\b", simplify = TRUE)
str_extract_all(shopping_list, "\\b[a-z]+\\b")
str_extract_all("Kobe Bryant", "\\b[a-z]+\\b")
str_locate("aaa12xxx", "[0-9]+")
str_extract("aaa12xxx", "[0-9]+")
gsub("[^0-9]", "", "aaa12xxxx")
sub(".*?([0-9]+).*", "\\1", "aaa12xx99",perl=TRUE)
gsub('([[:alpha:]]+)([0-9]+)([[:alpha:]]+)', '\\2', "aaa12xxx")
substr("aaa12456xxx",test,test+attr(test,"match.length")-1)
string = c("G1:E001", "G2:E002", G3:E003)
string = c("G1:E001", "G2:E002", "G3:E003")
sub(".*:", "", string)
sub(" ", "", "Kobe Bryant")
sub("[a-zA-Z]+ ", "", "Kobe Bryant")
sub("[a-zA-Z]+ ", "", "Kobe Bryant")," ",sub(" [a-zA-Z]+", "", "Kobe Bryant")
sub("[a-zA-Z]+ ", "", "Kobe Bryant")
sub(" [a-zA-Z]+", "", "Kobe Bryant")
paste0(sub("[a-zA-Z]+ ", "", "Kobe Bryant"),sub(" [a-zA-Z]+", "", "Kobe Bryant"))
paste0(sub("[a-zA-Z]+ ", "", "Kobe Bryant")," ",sub(" [a-zA-Z]+", "", "Kobe Bryant"))
df_players$name <- paste0(sub("[a-zA-Z]+ ", "", df_players$player)," ",sub(" [a-zA-Z]+", "", df_players$player))
head(df_players)
write.csv(df_players,"players.csv", row.names = F)
players <- read.csv("players.csv")
players %>% filter(!is.na(str_match(as.character(players$name),"^A.*")))
as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^A.*"))))
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^A.*")))),
B = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^B.*")))),
C = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^C.*")))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
library(ggplot2)
library(dplyr)
library(bbr)
library(htmltab)
library(stringr)
library(shiny)
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/shiny_app/player_comparions_per_career_year/")
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^A.*")))),
B = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^B.*")))),
C = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^C.*")))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
#rm(list = ls())
library(ggplot2)
library(dplyr)
library(bbr)
library(htmltab)
library(stringr)
library(shiny)
setwd("/Users/mebner/Documents/for_me/R_coursera/GitHub/shiny_app/player_comparions_per_career_year/")
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^A.*")))),
B = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^B.*")))),
C = as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^C.*")))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^A.*")
)
as.list(players %>% filter(!is.na(str_match(as.character(players$name),"^A.*"))))
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = as.list(players %>%select(slug,name) %>% filter(!is.na(str_match(as.character(players$name),"^A.*")))),
B = as.list(players %>%select(slug,name) %>% filter(!is.na(str_match(as.character(players$name),"^B.*")))),
C = as.list(players %>%select(slug,name) %>% filter(!is.na(str_match(as.character(players$name),"^C.*")))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = as.list(players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^A.*")))),
B = as.list(players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^B.*")))),
C = as.list(players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^C.*")))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = as.list(players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^A.*")))),
B = as.list(players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^B.*")))),
C = as.list(players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^C.*")))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^A.*"))),
B = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^B.*"))),
C = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^C.*"))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = players %>% filter(!is.na(str_match(as.character(players$name),"^A.*") %>% select(slug))),
B = players %>% filter(!is.na(str_match(as.character(players$name),"^B.*") %>% select(slug))),
C = players %>% filter(!is.na(str_match(as.character(players$name),"^C.*") %>% select(slug))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
players %>% filter(!is.na(str_match(as.character(players$name),"^A.*") %>% select(slug)
)
)
players %>% filter(!is.na(str_match(as.character(players$name))),"^A.*") %>% select(slug)
players %>% filter(!is.na(str_match(as.character(players$name)
)
)
)
players %>% filter(!is.na(str_match(as.character(players$name))))
players %>% filter(!is.na(str_match(as.character(players$name))))
!is.na(str_match(as.character(players$name)))
str_match(as.character(players$name))
as.character(players$name)
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^A.*"))),
B = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^B.*"))),
C = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^C.*"))))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
filter(!is.na(str_match(as.character(players$name),"^A.*"))
)
!is.na(str_match(as.character(players$name),"^A.*"))
runApp(list(
ui = fluidPage(
selectInput(
'foo', 'Select input with option groups',
choices = list(A = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^A.*")) %>% select(slug)),
B = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^B.*")) %>% select(slug)),
C = players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^C.*"))) %>% select(slug))
),
verbatimTextOutput('bar')
),
server = function(input, output) {
output$bar <- renderText(paste('You selected', input$foo))
}
))
players %>%select(name,slug) %>% filter(!is.na(str_match(as.character(players$name),"^A.*")) %>% select(slug))
